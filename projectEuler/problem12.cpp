/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
#include <iostream>
#include <stdlib.h>
#include <bitset>

std::bitset<100000000> primes; // assume all are primes, slice them out otherwise

unsigned long long triangle(unsigned long long n)
{
  return ( (n*(n+1))/2 );
}

unsigned long long divisors( unsigned long long n )
{
  // get the prime factorization, then add one to each power and multiply together.
  int p;
  unsigned long long product = 1;
  for (p=2;p*2<=n;p++){
    if ( p >= primes.size() ) {
      std::cout << "p = " << p << " is bigger than the primes we support" << std::endl;
    }
    if (primes[p]) {
      unsigned long long d = 1;
      unsigned long long n_copy = n;
      while ( n_copy % p == 0 ) {
	//std::cout << p << " is a factor of " << n << std::endl;
	d++;
	n_copy /= p;
      }
      product *= d;
    }
  }
  return product;
}

void init_primes() 
{
  for (int candidate=0;candidate < primes.size(); candidate++)
    primes[candidate]=true;

  primes[0] = primes[1] = false;

  for (int candidate=0; candidate*candidate<primes.size(); candidate++)
    {
      if ( primes[candidate] )
	{
	  for (int multiple=2; multiple*candidate < primes.size(); multiple++)
	    {
	      primes[multiple*candidate] = false;
	    }
	}
    }
}

int main(int argc, char* argv[])
{
  init_primes();

  if ( argc < 2 ) {
    std::cout << argv[0] << " <M>" << std::endl
	      << " print first triangle number having over M divisors" << std::endl;
    return 1;
  }

  long long start = 1;
  if ( argc > 2 ) {
    start = atol(argv[2]);
    std::cout << "starting at " << start << std::endl;
  }
  long long candidate = start;
  unsigned long long M = atoi( argv[1] );
  for(; ; candidate++) {
    unsigned long long t = triangle(candidate);
    unsigned long long d = divisors( t );
    if ( candidate % 100 == 0 ) {
      std::cout << candidate << "-th triangle number " << t << " has " << d << " divisors" << std::endl;
    }
    if ( d > M ) {
      std::cout << t << " has " << d << " divisors" << std::endl;
      break;
    }
  }
}
